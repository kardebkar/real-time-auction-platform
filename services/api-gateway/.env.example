# Database Configuration
DATABASE_URL="postgresql://auction_user:auction_pass@localhost:5432/auction_db"

# Redis Configuration
REDIS_URL="redis://localhost:6379"

# JWT Configuration  
JWT_SECRET=your-super-secret-jwt-key-change-in-production
JWT_REFRESH_SECRET=your-refresh-secret-change-in-production
JWT_EXPIRY=1h
JWT_REFRESH_EXPIRY=7d

# Server Configuration
PORT=4000
NODE_ENV=development

# CORS Configuration
ALLOWED_ORIGINS=http://localhost:3000,http://localhost:3005,http://localhost:3006

# Rate Limiting
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=1000

# WebSocket Configuration
WS_PORT=3001

# Auction Configuration
AUCTION_EXTENSION_MINUTES=5
MAX_BID_AMOUNT=1000000
MIN_BID_INCREMENT=1.0

# docker-compose.yml (For Phase 1 Development)
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: auction_postgres
    environment:
      POSTGRES_DB: auction_db
      POSTGRES_USER: auction_user
      POSTGRES_PASSWORD: auction_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: auction_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes

  # API Gateway
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: auction_api_gateway
    ports:
      - "4000:4000"
    environment:
      DATABASE_URL: postgresql://auction_user:auction_pass@postgres:5432/auction_db
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key
      NODE_ENV: development
    depends_on:
      - postgres
      - redis
    volumes:
      - ./services/api-gateway:/app
      - /app/node_modules
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

# services/api-gateway/Dockerfile
FROM node:18-alpine

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY prisma ./prisma/

# Install dependencies
RUN npm ci

# Generate Prisma client
RUN npx prisma generate

# Copy source code
COPY . .

# Build the application
RUN npm run build

# Expose port
EXPOSE 4000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:4000/health || exit 1

# Start the application
CMD ["npm", "start"]

# Makefile for Phase 1 Development
.PHONY: help install dev build test clean setup docker-up docker-down migrate seed

help: ## Show this help message
	@echo 'Usage: make [target]'
	@echo ''
	@echo 'Targets:'
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  %-15s %s\n", $$1, $$2}' $(MAKEFILE_LIST)

install: ## Install all dependencies
	npm install
	cd services/api-gateway && npm install

setup: ## Complete setup for development
	@echo "üöÄ Setting up Real-Time Auction Platform Phase 1..."
	make install
	cp .env.example .env
	cp services/api-gateway/.env.example services/api-gateway/.env
	@echo "üìù Please update .env files with your configuration"
	@echo "‚úÖ Setup complete! Run 'make dev' to start development"

dev: ## Start development environment
	docker-compose up -d postgres redis
	@echo "‚è≥ Waiting for database to be ready..."
	sleep 5
	make migrate
	make seed
	npm run dev

build: ## Build all services
	npm run build

test: ## Run all tests
	npm run test

clean: ## Clean build artifacts
	npm run clean
	docker-compose down
	docker volume prune -f

docker-up: ## Start all services with Docker
	docker-compose up -d

docker-down: ## Stop all Docker services
	docker-compose down

migrate: ## Run database migrations
	cd services/api-gateway && npm run db:migrate

seed: ## Seed database with sample data
	cd services/api-gateway && npm run db:seed
