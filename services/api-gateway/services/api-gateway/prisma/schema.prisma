generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String?
  lastName  String?
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  
  phone       String?
  avatar      String?
  dateOfBirth DateTime?
  address     Json?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLogin DateTime?
  
  auctions Auction[] @relation("AuctionSeller")
  bids     Bid[]
  watchedAuctions AuctionWatcher[]
  
  @@map("users")
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

model Category {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  slug        String @unique
  isActive    Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  auctions Auction[]
  
  @@map("categories")
}

model Auction {
  id               String        @id @default(cuid())
  title            String
  description      String
  startingPrice    Float
  currentPrice     Float?
  minimumIncrement Float         @default(1.0)
  buyNowPrice      Float?
  
  startTime DateTime
  endTime   DateTime
  
  status    AuctionStatus @default(DRAFT)
  images    String[]      @default([])
  tags      String[]      @default([])
  
  bidCount     Int @default(0)
  viewCount    Int @default(0)
  watcherCount Int @default(0)
  
  sellerId   String
  seller     User     @relation("AuctionSeller", fields: [sellerId], references: [id], onDelete: Cascade)
  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])
  
  bids     Bid[]
  watchers AuctionWatcher[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([status, startTime, endTime])
  @@index([categoryId])
  @@index([sellerId])
  @@index([currentPrice])
  @@map("auctions")
}

enum AuctionStatus {
  DRAFT
  SCHEDULED
  ACTIVE
  ENDED
  CANCELLED
  SOLD
}

model Bid {
  id        String   @id @default(cuid())
  amount    Float
  timestamp DateTime @default(now())
  isWinning Boolean  @default(false)
  
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  auctionId String
  auction   Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  
  @@unique([userId, auctionId, amount])
  @@index([auctionId, amount])
  @@index([userId, timestamp])
  @@index([timestamp])
  @@map("bids")
}

model AuctionWatcher {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  auctionId String
  auction   Auction @relation(fields: [auctionId], references: [id], onDelete: Cascade)
  
  @@unique([userId, auctionId])
  @@map("auction_watchers")
}
